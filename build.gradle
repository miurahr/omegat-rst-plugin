buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath group: 'kr.motd.gradle', name: 'sphinx-gradle-plugin', version: '1.0.2.Final'
  }
}
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'distribution'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'kr.motd.sphinx'

version = '0.0.2'

configurations {
    provided
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }

    integrationTest {
        compileClasspath += main.output + test.output + configurations.provided
        runtimeClasspath += main.output + test.output + configurations.provided
        groovy {
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven"
    }
    jcenter()
}

dependencies {
    compile  'org.slf4j:slf4j-api:1.7.21'
    compile('dom4j:dom4j:1.6.1') {exclude group: 'xml-apis', module: 'xml-apis'}
    compile  'commons-logging:commons-logging:1.2'
    compile  'commons-primitives:commons-primitives:1.0'
    provided 'org.omegat:omegat:4.0.0-02'
    provided 'commons-io:commons-io:2.4'
    provided 'commons-lang:commons-lang:2.6'
    provided 'org.slf4j:slf4j-nop:1.7.21'
    testCompile 'org.codehaus.groovy:groovy:2.4.7'
    testCompile 'org.testng:testng:6.9.10'
    testCompile 'com.alibaba:fastjson:1.2.17'
}
test.useTestNG()

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

// Build FatJar
//
// It is easy to install a 3rd-party OmegaT plugin which is
// a single jar file, because all user should do is just to put the jar
// file into plugins directory.
jar {
    from files(sourceSets.main.output.classesDir)
    from {configurations.compile.collect {zipTree(it)}} {
        exclude 'META-INF/MANIFEST.MF', 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    }
    manifest {
        // plugin's main class name is defined in gradle.properties file.
        attributes("OmegaT-Plugins": pluginMainClass)
    }
}

checkstyle {
    config = resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    toolVersion = '7.1'
}
tasks.checkstyleMain.setGroup('Verification')

// Force prevent checkstyle/findbugs on Test.
task checkstyleTest(overwrite: true) << {}
task checkstyleIntegrationTest(overwrite: true) << {}
task findbugsTest(overwrite: true) << {}
task findbugsIntegrationTest(overwrite: true) << {}

// Treat findbugs failure as warning
findbugs {
    ignoreFailures = true
}
tasks.withType(FindBugs) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
    setGroup('Verification')
}

task integrationTest(type: Test) {
    description = "Integration/Acceptance Test"
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    useTestNG()
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test
tasks.integrationTest.setGroup('Verification')

// Hack for IntelliJ IDEA 
idea {
    module {
        testSourceDirs += file('src/integration-test/java')
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

javadoc {
    classpath += configurations.provided
    options.locale = 'en_US'
}

groovydoc {
    classpath += configurations.provided
}

tasks.sphinx.setGroup("Documentation")

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

distTar {
  compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from('README.md', 'COPYING')
            into('docs') {
                from 'CHANGELOG.md'
            }
            from(sourceJar) {
                into 'source'
            }
            from(jar) {
                into 'plugin'
            }
        }
    }
}

